@{
  Layout = "_Layout";
}

@model SweetNSavory.Models.Treat

<h2>Treat Details</h2>
<hr />
<h3>@Html.DisplayNameFor(model => model.Description): @Html.DisplayFor(model => model.Description)</h3>
@* <h3>Steps: @Html.DisplayFor(model => model.Steps)</h3>
<h3>Rating: @Html.DisplayFor(model => model.Rating)</h3> *@

@if(@Model.JoinTreFlav.Count == 0)
{
  <p>This Treat does not use any flavors</p>
}
else
{
  <h4>Flavors used by the treat:</h4>
  <ul>

  @* Ln 23-31:  Need to reference Orders in a way that also allows us to reference Categories, and do so in the same function. (In order to display associated Categories and Orders also.) *@
  @foreach(var join in Model.JoinTreFlav)
  {
    <li>@join.Flavor.Name</li>
    @using (Html.BeginForm("DeleteFlavor", "Treats"))
    {
      @Html.Hidden("joinId", @join.TreatFlavorId)
      <input type="submit" value="Delete"/>
    }
  }
  </ul>
}

@* 
@if(@Model.JoinTreOrd.Count == 0)
{
  <p>This treat does not have any orders</p>
}
else
{
  <h4>Orders in the treat:</h4>
  <ul>

  @foreach(var join in Model.JoinTreOrd)
  {
    <li>@join.Order.Name</li>
    @using (Html.BeginForm("DeleteOrder", "Treats"))
    {
      @Html.Hidden("joinId", @join.TreatOrderId)
      <input type="submit" value="Delete"/>
    }
  }
  </ul>
} *@


<p>@Html.ActionLink("Back to list", "Index")</p>
<p>@Html.ActionLink("Edit Treat", "Edit", new { id = Model.TreatId })</p>
<p>@Html.ActionLink("Delete Treat", "Delete", new { id = Model.TreatId })</p>
<p>@Html.ActionLink("Add a Flavor", "AddFlavor", new { id = Model.TreatId })</p>
<p>@Html.ActionLink("Add an Order", "AddOrder", new { id = Model.TreatId })</p>